1. Single Responsibility Principle (SRP)
- SRP (Nguyên lý trách nhiệm đơn lẻ) nhấn mạnh rằng mỗi class chỉ nên đảm nhiệm một trách nhiệm duy nhất. Điều này giúp code dễ dàng mở rộng và bảo trì mà không ảnh hưởng đến các phần khác.
- Cách áp dụng trong bài toán:
Tách các chức năng thành các class riêng biệt:
BankTransaction: Chỉ đại diện cho một giao dịch ngân hàng, bao gồm các thông tin như ngày, số tiền, và danh mục.
BankTransactionParser: Chỉ chịu trách nhiệm phân tích (parse) file CSV để chuyển dữ liệu thô thành danh sách đối tượng BankTransaction.
BankTransactionProcessor: Chỉ chịu trách nhiệm thực hiện các thao tác xử lý trên danh sách giao dịch, như tính tổng lợi nhuận/lỗ, đếm giao dịch theo tháng, hoặc tìm các chi tiêu lớn nhất.
MainApplication: Chỉ chịu trách nhiệm điều phối luồng dữ liệu và giao tiếp với người dùng (ví dụ: đọc file CSV, gọi các hàm xử lý, in kết quả).
- Lợi ích:
Mỗi class có một nhiệm vụ duy nhất, giúp code dễ hiểu hơn.
Khi có thay đổi (ví dụ: thay đổi định dạng file CSV), chỉ cần sửa BankTransactionParser mà không ảnh hưởng đến các phần khác.

2. Cohesion (Tính gắn kết)
- Cohesion đề cập đến mức độ các phương thức và dữ liệu trong một class làm việc cùng nhau để hoàn thành nhiệm vụ của class. Một class có tính gắn kết cao khi tất cả các phương thức của nó đều liên quan đến một trách nhiệm cụ thể.
- Cách áp dụng trong bài toán:
Mỗi class có tính gắn kết cao:
BankTransactionProcessor: Chỉ chứa các phương thức liên quan đến xử lý dữ liệu giao dịch, như tính toán tổng, đếm số lượng giao dịch, tìm chi tiêu lớn nhất, và phân tích danh mục.
BankTransactionParser: Chỉ tập trung vào việc chuyển đổi dữ liệu từ file CSV sang danh sách BankTransaction.
- Lợi ích:
Các class nhỏ gọn, dễ dàng tái sử dụng và mở rộng.
Mỗi class hoạt động độc lập, giảm thiểu xung đột khi thêm chức năng mới.

3. Coupling (Độ liên kết)
- Coupling là mức độ phụ thuộc giữa các class. Hệ thống tốt cần giữ coupling ở mức thấp để giảm ràng buộc giữa các module, giúp dễ bảo trì và mở rộng.
- Cách áp dụng trong bài toán:
Giảm độ liên kết giữa các class:
Các class giao tiếp thông qua các interface hoặc dữ liệu cụ thể, thay vì tham chiếu trực tiếp đến nhau.
BankTransactionParser chỉ trả về danh sách BankTransaction mà không xử lý logic phức tạp, giao nhiệm vụ này cho BankTransactionProcessor.
BankTransactionProcessor không quan tâm file dữ liệu được lấy từ đâu; nó chỉ xử lý danh sách BankTransaction.
- Lợi ích:
Thay đổi logic ở BankTransactionParser (ví dụ: thêm hỗ trợ định dạng JSON thay vì CSV) không làm ảnh hưởng đến BankTransactionProcessor hoặc MainApplication.
Tính linh hoạt cao hơn, dễ dàng thay thế hoặc mở rộng từng module.
